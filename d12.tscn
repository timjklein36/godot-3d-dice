[gd_scene load_steps=7 format=2]

[ext_resource path="res://d12.jpg" type="Texture" id=1]
[ext_resource path="res://Die.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.5);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Solid"
surfaces/0 = {
"aabb": AABB( -0.934172, -0.934172, -0.934172, 1.86834, 1.86834, 1.86834 ),
"array_data": PoolByteArray( 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 191, 0, 66, 148, 0, 39, 102, 63, 127, 73, 57, 133, 53, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 191, 0, 66, 148, 0, 39, 102, 63, 127, 3, 56, 132, 53, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 191, 0, 66, 148, 0, 39, 102, 63, 127, 167, 56, 39, 56, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 190, 0, 66, 148, 0, 38, 102, 63, 127, 174, 57, 61, 55, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 191, 0, 66, 148, 0, 39, 102, 63, 127, 3, 56, 132, 53, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 191, 0, 66, 148, 0, 39, 102, 63, 127, 67, 55, 60, 55, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 191, 0, 66, 148, 0, 39, 102, 63, 127, 167, 56, 39, 56, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 191, 108, 0, 190, 0, 39, 103, 63, 127, 73, 57, 129, 53, 229, 37, 111, 63, 96, 177, 182, 62, 0, 0, 0, 0, 108, 0, 190, 0, 38, 103, 63, 127, 176, 57, 139, 51, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 108, 0, 190, 0, 39, 103, 63, 127, 63, 55, 147, 51, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 191, 108, 0, 190, 0, 39, 102, 63, 127, 4, 56, 130, 53, 229, 37, 111, 63, 96, 177, 182, 62, 0, 0, 0, 0, 108, 0, 190, 0, 38, 103, 63, 127, 176, 57, 139, 51, 229, 37, 111, 63, 96, 177, 182, 190, 0, 0, 0, 0, 108, 0, 190, 0, 38, 103, 63, 127, 166, 56, 111, 49, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 108, 0, 190, 0, 38, 103, 63, 127, 63, 55, 147, 51, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 191, 66, 108, 0, 0, 193, 39, 102, 127, 75, 57, 134, 53, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 190, 66, 108, 0, 0, 193, 39, 102, 127, 89, 58, 153, 54, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 66, 108, 0, 0, 192, 39, 101, 127, 242, 58, 141, 51, 229, 37, 111, 63, 96, 177, 182, 62, 0, 0, 0, 0, 66, 108, 0, 0, 192, 39, 102, 127, 174, 57, 151, 51, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 190, 66, 108, 0, 0, 193, 39, 102, 127, 89, 58, 153, 54, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 62, 66, 108, 0, 0, 193, 39, 102, 127, 93, 59, 133, 53, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 66, 108, 0, 0, 193, 39, 102, 127, 242, 58, 141, 51, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 191, 0, 190, 148, 0, 102, 64, 217, 127, 1, 56, 130, 53, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 0, 190, 148, 0, 102, 63, 217, 127, 60, 55, 149, 51, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 191, 0, 190, 148, 0, 102, 63, 217, 127, 191, 51, 133, 53, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 191, 0, 190, 148, 0, 102, 63, 217, 127, 240, 53, 150, 54, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 0, 190, 148, 0, 103, 62, 218, 127, 60, 55, 149, 51, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 190, 0, 190, 148, 0, 103, 62, 218, 127, 172, 52, 142, 51, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 191, 0, 190, 148, 0, 103, 62, 218, 127, 191, 51, 133, 53, 229, 37, 111, 63, 96, 177, 182, 62, 0, 0, 0, 0, 108, 0, 66, 0, 217, 102, 63, 127, 176, 57, 138, 51, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 108, 0, 66, 0, 217, 103, 63, 127, 186, 58, 96, 49, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 63, 108, 0, 66, 0, 217, 102, 63, 127, 14, 57, 159, 43, 229, 37, 111, 63, 96, 177, 182, 190, 0, 0, 0, 0, 108, 0, 66, 0, 217, 102, 63, 127, 168, 56, 99, 49, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 108, 0, 66, 0, 217, 102, 64, 127, 186, 58, 96, 49, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 63, 108, 0, 66, 0, 217, 102, 64, 127, 82, 58, 193, 43, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 63, 108, 0, 66, 0, 217, 102, 64, 127, 14, 57, 159, 43, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 190, 190, 108, 0, 0, 103, 63, 219, 127, 86, 58, 11, 57, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 191, 190, 108, 0, 0, 102, 63, 218, 127, 73, 57, 133, 56, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 63, 190, 108, 0, 0, 102, 63, 216, 127, 166, 56, 233, 57, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 62, 190, 108, 0, 0, 102, 63, 217, 127, 236, 57, 234, 57, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 191, 190, 108, 0, 0, 102, 63, 215, 127, 73, 57, 133, 56, 229, 37, 111, 191, 96, 177, 182, 62, 0, 0, 0, 0, 190, 108, 0, 0, 102, 63, 215, 127, 68, 56, 9, 57, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 63, 190, 108, 0, 0, 102, 63, 215, 127, 166, 56, 233, 57, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 191, 148, 0, 190, 0, 0, 126, 0, 127, 67, 55, 68, 55, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 191, 148, 0, 190, 0, 0, 126, 0, 127, 46, 53, 41, 56, 229, 37, 111, 191, 96, 177, 182, 62, 0, 0, 0, 0, 148, 0, 190, 0, 0, 126, 0, 127, 66, 56, 9, 57, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 191, 148, 0, 190, 0, 0, 126, 0, 127, 163, 56, 44, 56, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 191, 148, 0, 190, 0, 0, 126, 255, 127, 46, 53, 41, 56, 229, 37, 111, 191, 96, 177, 182, 190, 0, 0, 0, 0, 148, 0, 190, 0, 0, 126, 255, 127, 246, 53, 6, 57, 229, 37, 111, 191, 96, 177, 182, 62, 0, 0, 0, 0, 148, 0, 190, 0, 0, 126, 255, 127, 66, 56, 9, 57, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 63, 0, 66, 108, 0, 40, 102, 193, 127, 165, 56, 233, 57, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 63, 0, 66, 108, 0, 39, 102, 193, 127, 61, 55, 115, 58, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 0, 66, 108, 0, 40, 102, 193, 127, 70, 57, 81, 59, 0, 0, 0, 0, 229, 37, 111, 63, 96, 177, 182, 62, 0, 66, 108, 0, 41, 102, 193, 127, 173, 57, 112, 58, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 63, 0, 66, 108, 0, 39, 102, 193, 127, 61, 55, 115, 58, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 63, 0, 66, 108, 0, 39, 102, 193, 127, 4, 56, 81, 59, 54, 205, 19, 63, 54, 205, 19, 63, 54, 205, 19, 63, 0, 66, 108, 0, 39, 102, 193, 127, 70, 57, 81, 59, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 63, 66, 148, 0, 0, 102, 63, 38, 127, 64, 56, 171, 43, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 62, 66, 148, 0, 0, 102, 63, 38, 127, 249, 53, 180, 43, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 66, 148, 0, 0, 103, 63, 38, 127, 63, 55, 144, 51, 229, 37, 111, 63, 96, 177, 182, 190, 0, 0, 0, 0, 66, 148, 0, 0, 103, 63, 37, 127, 164, 56, 94, 49, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 62, 66, 148, 0, 0, 102, 63, 41, 127, 249, 53, 180, 43, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 190, 66, 148, 0, 0, 102, 63, 41, 127, 44, 53, 93, 49, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 191, 66, 148, 0, 0, 102, 63, 41, 127, 63, 55, 144, 51, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 63, 190, 148, 0, 0, 154, 63, 38, 127, 33, 53, 232, 57, 229, 37, 111, 191, 96, 177, 182, 190, 0, 0, 0, 0, 190, 148, 0, 0, 154, 63, 38, 127, 243, 53, 9, 57, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 190, 190, 148, 0, 0, 154, 63, 38, 127, 87, 47, 7, 57, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 62, 190, 148, 0, 0, 154, 63, 38, 127, 57, 49, 230, 57, 229, 37, 111, 191, 96, 177, 182, 190, 0, 0, 0, 0, 190, 148, 0, 0, 154, 63, 38, 127, 243, 53, 9, 57, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 191, 190, 148, 0, 0, 154, 63, 38, 127, 213, 51, 129, 56, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 190, 190, 148, 0, 0, 154, 63, 38, 127, 87, 47, 7, 57, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 63, 148, 0, 66, 0, 0, 126, 0, 127, 42, 53, 231, 57, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 63, 148, 0, 66, 0, 0, 126, 0, 127, 59, 55, 115, 58, 229, 37, 111, 191, 96, 177, 182, 62, 0, 0, 0, 0, 148, 0, 66, 0, 0, 126, 0, 127, 68, 56, 9, 57, 229, 37, 111, 191, 96, 177, 182, 190, 0, 0, 0, 0, 148, 0, 66, 0, 0, 126, 0, 127, 251, 53, 9, 57, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 63, 148, 0, 66, 0, 0, 126, 0, 127, 59, 55, 115, 58, 54, 205, 19, 191, 54, 205, 19, 63, 54, 205, 19, 63, 148, 0, 66, 0, 0, 126, 0, 127, 164, 56, 232, 57, 229, 37, 111, 191, 96, 177, 182, 62, 0, 0, 0, 0, 148, 0, 66, 0, 0, 126, 0, 127, 68, 56, 9, 57, 54, 205, 19, 191, 54, 205, 19, 191, 54, 205, 19, 63, 0, 190, 108, 0, 218, 102, 63, 127, 31, 53, 233, 57, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 62, 0, 190, 108, 0, 218, 102, 63, 127, 59, 50, 116, 58, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 63, 0, 190, 108, 0, 217, 102, 63, 127, 112, 54, 81, 59, 96, 177, 182, 190, 0, 0, 0, 0, 229, 37, 111, 63, 0, 190, 108, 0, 217, 102, 63, 127, 58, 55, 115, 58, 0, 0, 0, 0, 229, 37, 111, 191, 96, 177, 182, 62, 0, 190, 108, 0, 215, 102, 63, 127, 59, 50, 116, 58, 54, 205, 19, 63, 54, 205, 19, 191, 54, 205, 19, 63, 0, 190, 108, 0, 215, 102, 63, 127, 219, 51, 78, 59, 96, 177, 182, 62, 0, 0, 0, 0, 229, 37, 111, 63, 0, 190, 108, 0, 215, 102, 63, 127, 112, 54, 81, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 7, 0, 9, 0, 8, 0, 7, 0, 10, 0, 9, 0, 11, 0, 13, 0, 12, 0, 14, 0, 16, 0, 15, 0, 14, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 21, 0, 24, 0, 23, 0, 25, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 28, 0, 31, 0, 30, 0, 32, 0, 34, 0, 33, 0, 35, 0, 37, 0, 36, 0, 35, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 42, 0, 45, 0, 44, 0, 46, 0, 48, 0, 47, 0, 49, 0, 51, 0, 50, 0, 49, 0, 52, 0, 51, 0, 53, 0, 55, 0, 54, 0, 56, 0, 58, 0, 57, 0, 56, 0, 59, 0, 58, 0, 60, 0, 62, 0, 61, 0, 63, 0, 65, 0, 64, 0, 63, 0, 66, 0, 65, 0, 67, 0, 69, 0, 68, 0, 70, 0, 72, 0, 71, 0, 70, 0, 73, 0, 72, 0, 74, 0, 76, 0, 75, 0, 77, 0, 79, 0, 78, 0, 77, 0, 80, 0, 79, 0, 81, 0, 83, 0, 82, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 108,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 84
}

[sub_resource type="ConvexPolygonShape" id=4]
points = PoolVector3Array( -0.912303, -0.370337, 0.0283951, -0.912303, -0.370337, -0.0283951, -0.912137, 0.370441, -0.0283899, -0.912137, 0.370441, 0.0283899, -0.846977, -0.395281, -0.14115, -0.846977, -0.395281, 0.14115, -0.846975, 0.395271, -0.14115, -0.846975, 0.395271, 0.14115, -0.577334, 0.577441, -0.577296, -0.577334, 0.577441, 0.577296, -0.577331, -0.577442, -0.577293, -0.577331, -0.577442, 0.577293, -0.395437, 0.14093, -0.847114, -0.395437, 0.14093, 0.847114, -0.395389, -0.141098, -0.84701, -0.395389, -0.141098, 0.84701, -0.370501, -0.0284852, -0.912038, -0.370501, -0.0284852, 0.912038, -0.370501, 0.0282995, -0.912038, -0.370501, 0.0282995, 0.912038, -0.141112, -0.847001, 0.395114, -0.141111, -0.846999, -0.395113, -0.0852846, 0.881499, -0.369595, -0.0852846, 0.881499, 0.369595, -0.0283476, 0.912045, -0.370498, -0.0283476, 0.912045, 0.370498, 4.64628e-05, -0.0286245, -0.916512, 4.64628e-05, -0.0286245, 0.916512, 4.6463e-05, -0.912119, -0.370452, 4.6463e-05, -0.912115, 0.370451, 0.0284406, 0.912045, -0.370498, 0.0284406, 0.912045, 0.370498, 0.141223, -0.846932, -0.395165, 0.141223, -0.846932, 0.395165, 0.141224, 0.846932, -0.395169, 0.141224, 0.846932, 0.395169, 0.310744, 0.734569, 0.480227, 0.370558, -0.0283039, -0.911948, 0.370558, -0.0283039, 0.911948, 0.370558, 0.0282967, -0.911948, 0.370558, 0.0282967, 0.911948, 0.395304, -0.141098, 0.847007, 0.395305, -0.141098, -0.84701, 0.395307, 0.14109, -0.847014, 0.395307, 0.14109, 0.847014, 0.57745, -0.577287, -0.577319, 0.57745, -0.577287, 0.577319, 0.57745, 0.577282, -0.577319, 0.57745, 0.577282, 0.577319, 0.846986, -0.395064, -0.141136, 0.846986, -0.395064, 0.141136, 0.846986, 0.395056, -0.141136, 0.846986, 0.395056, 0.141136, 0.912167, -0.370423, -0.028388, 0.912167, -0.370423, 0.028388, 0.912174, 0.370418, -0.0283882, 0.912174, 0.370418, 0.0283882 )

[node name="d12" type="RigidBody"]
script = ExtResource( 2 )

[node name="Solid" type="MeshInstance" parent="."]
transform = Transform( 0.8, 0, 0, 0, 0.8, 0, 0, 0, 0.8, 0, 0, 0 )
mesh = SubResource( 3 )
material/0 = null
__meta__ = {
"_edit_lock_": true
}

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 0.8, 0, 0, 0, 0.8, 0, 0, 0, 0.8, 0, 0, 0 )
shape = SubResource( 4 )
__meta__ = {
"_edit_lock_": true
}

[node name="1" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.32, -0.55 )

[node name="2" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.55, 0, -0.32 )

[node name="3" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.32, -0.55, 0 )

[node name="4" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.32, -0.55, 0 )

[node name="5" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.55, 0, -0.32 )

[node name="6" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.32, -0.55 )

[node name="7" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.32, 0.55 )

[node name="8" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.32, 0.55, 0 )

[node name="9" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.32, 0.55, 0 )

[node name="10" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.55, 0, 0.32 )

[node name="11" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.32, 0.55 )

[node name="12" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.55, 0, 0.32 )
