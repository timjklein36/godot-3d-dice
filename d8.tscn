[gd_scene load_steps=7 format=2]

[ext_resource path="res://d8.PNG" type="Texture" id=1]
[ext_resource path="res://Die.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.5);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Solid"
surfaces/0 = {
"aabb": AABB( -1, -1, -1, 2, 2.00001, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 73, 73, 183, 0, 89, 167, 0, 127, 30, 45, 202, 57, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 73, 73, 183, 0, 89, 167, 0, 127, 156, 54, 202, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 73, 73, 183, 0, 89, 167, 0, 127, 228, 51, 103, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 183, 73, 183, 0, 167, 167, 0, 127, 168, 43, 133, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 183, 73, 183, 0, 167, 167, 0, 127, 63, 51, 75, 55, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 183, 73, 183, 0, 167, 167, 0, 127, 74, 54, 133, 52, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 183, 73, 73, 0, 89, 0, 89, 127, 219, 57, 106, 43, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 183, 73, 73, 0, 89, 0, 89, 127, 133, 56, 101, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 183, 73, 73, 0, 89, 0, 89, 127, 48, 59, 101, 51, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 73, 73, 73, 0, 167, 0, 89, 127, 208, 57, 153, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 73, 73, 73, 0, 167, 0, 89, 127, 37, 59, 54, 58, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 73, 73, 73, 0, 167, 0, 89, 127, 123, 56, 54, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 73, 183, 183, 0, 0, 167, 89, 127, 57, 57, 63, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 73, 183, 183, 0, 0, 167, 89, 127, 29, 53, 63, 56, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 73, 183, 183, 0, 0, 167, 89, 127, 200, 55, 161, 57, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 183, 183, 183, 0, 0, 167, 89, 127, 65, 57, 160, 55, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 183, 183, 183, 0, 0, 167, 89, 127, 215, 55, 219, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 183, 183, 183, 0, 0, 167, 89, 127, 44, 53, 160, 55, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 183, 183, 73, 0, 89, 0, 89, 127, 222, 57, 34, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 183, 183, 73, 0, 89, 0, 89, 127, 51, 59, 93, 52, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 183, 183, 73, 0, 89, 0, 89, 127, 137, 56, 93, 52, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 73, 183, 73, 0, 167, 0, 89, 127, 228, 57, 136, 56, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 73, 183, 73, 0, 167, 0, 89, 127, 143, 56, 235, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 73, 183, 73, 0, 167, 0, 89, 127, 58, 59, 235, 57 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 24,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}

[sub_resource type="ConvexPolygonShape" id=4]
points = PoolVector3Array( -0.953697, -0.0231516, -0.0231516, -0.953697, -0.0231516, 0.0231516, -0.953697, 0.0231516, -0.0231516, -0.953697, 0.0231516, 0.0231516, -0.348889, -0.558148, -0.0929625, -0.0231516, -0.953697, -0.0231516, -0.0231516, -0.953697, 0.0231516, -0.0231516, -0.0231516, -0.953697, -0.0231516, -0.0231516, 0.953697, -0.0231516, 0.0231516, -0.953697, -0.0231516, 0.0231516, 0.953697, -0.0231516, 0.953697, -0.0231516, -0.0231516, 0.953697, 0.0231516, 0.0231516, -0.953697, -0.0231516, 0.0231516, -0.953697, 0.0231516, 0.0231516, -0.0231516, -0.953697, 0.0231516, -0.0231516, 0.953697, 0.0231516, 0.0231516, -0.953697, 0.0231516, 0.0231516, 0.953697, 0.0231516, 0.953697, -0.0231516, 0.0231516, 0.953697, 0.0231516, 0.953697, -0.0231516, -0.0231516, 0.953697, -0.0231516, 0.0231516, 0.953697, 0.0231516, -0.0231516, 0.953697, 0.0231516, 0.0231516 )

[node name="d8" type="RigidBody"]
script = ExtResource( 2 )

[node name="Solid" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
material/0 = null
__meta__ = {
"_edit_lock_": true
}

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 4 )
__meta__ = {
"_edit_lock_": true
}

[node name="1" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.35, -0.35, -0.35 )

[node name="2" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.35, 0.35, -0.35 )

[node name="3" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.35, 0.35, -0.35 )

[node name="4" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.35, -0.35, -0.35 )

[node name="5" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.35, 0.35, 0.35 )

[node name="6" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.35, -0.35, 0.35 )

[node name="7" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.35, -0.35, 0.35 )

[node name="8" type="Position3D" parent="." groups=[
"faces",
]]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.35, 0.35, 0.35 )
